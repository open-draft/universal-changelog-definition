import { Badge } from '../components/Badge'
import { Code } from '../components/Code'

import releaseNotesExample from '../assets/RELEASE_NOTES.md'

const Homepage = () => {
  return (
    <div>
      <h1>
        Universal Changelog Definition <Badge>Draft</Badge>
      </h1>

      <blockquote>
        <strong>
          This is a draft stage specification. The points presented in this
          document are open for discussion and subjectd to change. Please start
          or join a discussion{' '}
          <a href="https://github.com/open-draft/universal-changelog-definition">
            in the repository
          </a>
          .
        </strong>
      </blockquote>

      <p>
        The key words "MUST‚Äù, "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in{' '}
        <a href="https://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a>.
      </p>

      <hr />

      <h2>1. Introduction</h2>
      <p>
        This is a specification document for the Universal Changelog Definition
        format.
      </p>
      <p>
        <em>Universal Changelog Definition (UCD)</em> is a format designed for
        listing software changes in a form that renders them clear for both
        humans and machines.
      </p>

      <h3>1.1 Purpose</h3>
      <p>
        The purpose of UCD is to propose a unified format of a changelog, making
        it more predictable for the software consumers.
      </p>
      <p>
        Below you can find a list of existing changelog conventions with their
        examples and areas that can be improved.
      </p>
      <h4>
        Conventional Changelog (
        <a
          href="https://github.com/conventional-changelog/conventional-changelog"
          target="_blank"
        >
          GitHub
        </a>
        )
      </h4>
      <p>
        Conventional Changelog uses a set of defined prefixes to standardize
        changes. Those prefixes are useful for machines to generate a proper
        release version, for example.
      </p>
      <p>
        However, since the format and the content of a change description
        remains abstract, the value of such changelog to the end consumer is in
        the hands of the software distributor. In other words, Conventional
        Changelog does not guarantee the quality of changes description, but
        ensures the changes are split into defined categories.
      </p>
      <Code
        code={`
## Features

- feat: Added a new way to compose error messages
- feat: Function declarations are now scoped

## Fixes

- fix: "compress" no longer thrown an exception with unknown argument
      `}
        language="markdown"
      />

      <h3>1.2 Intended Audience</h3>
      <p>UCD providers are software engineers responsible for the software.</p>
      <p>
        UCD consumers are software engineers that consume the distributed
        software. UCD MAY also be consumed by an automated software for the
        purpose of listing the changes or guiding a human consumer through the
        software update process.
      </p>

      <h3>1.3 Intended Use</h3>
      <p>
        UCD is intended to be used as an artifact of any major/minor release of
        software.
      </p>

      <h3>1.4 Intended Scope</h3>

      <h2>2. Overall Description</h2>

      <h2>3. Specification</h2>
      <h3>3.1 Format</h3>
      <p>UCD MUST be written in Markdown for the following reasons:</p>
      <ul>
        <li>Markdown document can be written by humans;</li>
        <li>Markdown document can also be generated by machines;</li>
        <li>
          Markdown document can be rendered in any major VCS provider (GitHub,
          GitLab, Bitbucket, etc.);
        </li>
      </ul>

      <h3>3.1 Categories</h3>
      <p>All release changes MUST be divided into the following categories:</p>
      <ul>
        <li>
          <strong>Added</strong>. New functionality introduced in the release.
          Bears mainly informatory character to the consumer.
        </li>
        <li>
          <strong>Removed</strong>. Entirely removed functionality that has no
          suitable alternatives offered by the software. Software consumer must
          treat this information to review their usage of the software and
          provide appropriate changes.
        </li>
        <li>
          <strong>Changed</strong>. Previously present functionality that has
          been changed.
        </li>
      </ul>

      <h3>3.x Declaration</h3>
      <h4>Category: Changed</h4>
      <Code
        code={require('../examples/changed-import.md').default}
        language="markdown"
      />
      <p>Each item of the Changed category:</p>
      <ul>
        <li>
          MUST include a change description represented by an arbitrary string;
        </li>
        <li>MUST include a diff code block illustrating the change;</li>
      </ul>

      <h2>References</h2>
      <h3>Full example</h3>
      <Code
        code={releaseNotesExample}
        language="markdown"
        focusedLines={[4, 11, 17]}
      />
    </div>
  )
}

export default Homepage
